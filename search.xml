<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发mutating webhook(修改statefulset的nodeselector)</title>
      <link href="/2024/04/09/kai-fa-mutating-webhook-xiu-gai-statefulset-de-nodeselector/"/>
      <url>/2024/04/09/kai-fa-mutating-webhook-xiu-gai-statefulset-de-nodeselector/</url>
      
        <content type="html"><![CDATA[<h2 id="何为-Admission-Webhook"><a href="#何为-Admission-Webhook" class="headerlink" title="何为 Admission Webhook"></a>何为 Admission Webhook</h2><p><strong>官网定义</strong><br>Admission webhook 是一种用于接收准入请求并对其进行处理的 HTTP 回调机制。可以定义两种类型的 admission webhook，即 validating admission webhook 和 mutating admission webhook。Mutating admission webhook 会先被调用。它们可以更改发送到 API 服务器的对象以执行自定义的设置默认值操作。</p><p><img src="/images/webhook-img.png" alt="webhook img"></p><p>接下来，本文将采用 Kubernetes 提供的 Mutating Admission Webhook 这一机制，来实现 statufulset 中修改或者新增 Pod NodeSelector 的，我们每次发送请求调用 API 创建 Pod 的时候，Pod 的 spec 信息会被先修改，再存储。如此一来，工作节点上的 Kublet 创建 Pod 的时候，将会预置NodeSelector。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>将 statufulset 中 索引是单数的 Pod 设置 NodeSelector 标签，标签的 key 为 "name"，value 为 "even"。双数的 Pod 设置 NodeSelector 标签，标签的 key 为 "name"，value 为 "odd"。 custom-node-selector: '{"key": "name", "even": "node1", "odd": "node2"}'</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>不能影响到其他的服务，所以需要通过 Mutating Admission Webhook 机制，在创建 Pod 之前，通过 Pod 的 annotations 或者 labels 去判断是否经过 Mutating Admission Webhook，我们这里用 labels 去过滤是否启用 mutating 规则。 当 Pod 的 labels 中有 <strong>"ab-build-different: 'true'"</strong> 的时候才去执行</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>部分代码解释<br>如果没有"ab-build-different: 'true'"标签，直接放行</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> pod.Labels[AppConfig.PodAnnotationKey] != <span class="string">"true"</span> {</span><br><span class="line">log.Infof(<span class="string">"Pod %s 没有注解 ab-build-different=true"</span>, pod.Name)</span><br><span class="line">resp.Allowed = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解析 json，我们这里的 annotations 是 <strong>custom-node-selector: '{"key": "name", "even": "node1", "odd": "node2"}'</strong><br>所以这段代码最后输出会是 name node1 或者 name node2，即是我们想要用来新增或修改的 Pod 的 nodeSelector</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNodeSelectorValue</span><span class="params">(pod *corev1.Pod, index <span class="type">int</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>, <span class="type">error</span>) {</span><br><span class="line">selectorJSON, ok := pod.Annotations[<span class="string">"custom-node-selector"</span>]</span><br><span class="line"><span class="keyword">if</span> !ok {</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, <span class="string">""</span>, fmt.Errorf(<span class="string">"注解 %s 不存在"</span>, <span class="string">"custom-node-selector"</span>)</span><br><span class="line">}</span><br><span class="line">log.Debugf(<span class="string">"selectorJSON: %s"</span>, selectorJSON) <span class="comment">// 打印查看实际的 JSON 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customSelector CustomNodeSelector</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(selectorJSON), &amp;customSelector)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, <span class="string">""</span>, fmt.Errorf(<span class="string">"解析自定义 nodeSelector 注解失败: %v"</span>, err)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index%<span class="number">2</span> == <span class="number">0</span> {</span><br><span class="line"><span class="keyword">return</span> customSelector.Key, customSelector.Even, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> customSelector.Key, customSelector.Odd, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>完整代码</strong><br>包含 具体逻辑实现， 钉钉通知</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">    <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">v1 <span class="string">"k8s.io/api/admission/v1"</span></span><br><span class="line">corev1 <span class="string">"k8s.io/api/core/v1"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Config 结构体存储配置信息</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> {</span><br><span class="line">WebhookServerPort      <span class="type">string</span> <span class="comment">// Webhook 服务器端口</span></span><br><span class="line">TLSCertPath            <span class="type">string</span> <span class="comment">// TLS 证书路径</span></span><br><span class="line">TLSKeyPath             <span class="type">string</span> <span class="comment">// TLS 密钥路径</span></span><br><span class="line">DingTalkWebhookURL     <span class="type">string</span> <span class="comment">// 钉钉机器人 Webhook URL</span></span><br><span class="line">DingTalkSecret         <span class="type">string</span> <span class="comment">// 钉钉机器人 Webhook Secret</span></span><br><span class="line">DingTalkMessageType    <span class="type">string</span> <span class="comment">// 钉钉消息类型</span></span><br><span class="line">PodAnnotationKey       <span class="type">string</span> <span class="comment">// Pod 注解键</span></span><br><span class="line">DefaultStatefulSetName <span class="type">string</span> <span class="comment">// 默认的 StatefulSet 名称，如果无法从 Pod ownerReferences 中获取</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppConfig 是全局配置实例</span></span><br><span class="line"><span class="keyword">var</span> AppConfig = Config{</span><br><span class="line">WebhookServerPort:      <span class="string">":8443"</span>,</span><br><span class="line">TLSCertPath:            <span class="string">"/etc/webhook/certs/tls.crt"</span>,</span><br><span class="line">TLSKeyPath:             <span class="string">"/etc/webhook/certs/tls.key"</span>,</span><br><span class="line">DingTalkWebhookURL:     <span class="string">"https://oapi.dingtalk.com/robot/send?access_token=xxx"</span>,</span><br><span class="line">DingTalkSecret:         <span class="string">"xxx"</span>,</span><br><span class="line">DingTalkMessageType:    <span class="string">"markdown"</span>,           <span class="comment">// 可以是 "text" 或 "markdown"</span></span><br><span class="line">PodAnnotationKey:       <span class="string">"ab-build-different"</span>, <span class="comment">// pod 打 annotations</span></span><br><span class="line">DefaultStatefulSetName: <span class="string">"my-custom-sts"</span>,      <span class="comment">// 默认的 StatefulSet 名称，如果无法从 Pod ownerReferences 中获取</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CustomNodeSelector <span class="keyword">struct</span> {</span><br><span class="line">Key  <span class="type">string</span> <span class="string">`json:"key"`</span></span><br><span class="line">Even <span class="type">string</span> <span class="string">`json:"even"`</span></span><br><span class="line">Odd  <span class="type">string</span> <span class="string">`json:"odd"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DingTalkMessage <span class="keyword">struct</span> {</span><br><span class="line">Msgtype  <span class="type">string</span> <span class="string">`json:"msgtype"`</span></span><br><span class="line">Markdown <span class="keyword">struct</span> {</span><br><span class="line">Title <span class="type">string</span> <span class="string">`json:"title"`</span></span><br><span class="line">Text  <span class="type">string</span> <span class="string">`json:"text"`</span></span><br><span class="line">} <span class="string">`json:"markdown,omitempty"`</span></span><br><span class="line">Text <span class="keyword">struct</span> {</span><br><span class="line">Content <span class="type">string</span> <span class="string">`json:"content"`</span></span><br><span class="line">} <span class="string">`json:"text,omitempty"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">// 设置日志输出格式为 JSON</span></span><br><span class="line">log.SetFormatter(&amp;logrus.JSONFormatter{})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">http.HandleFunc(<span class="string">"/mutate"</span>, handleMutate)</span><br><span class="line">log.Info(<span class="string">"服务启动，监听端口"</span>, AppConfig.WebhookServerPort)</span><br><span class="line"><span class="comment">// http.ListenAndServeTLS 是一个阻塞调用，持续运行直到发生错误</span></span><br><span class="line">log.Fatal(http.ListenAndServeTLS(AppConfig.WebhookServerPort, AppConfig.TLSCertPath, AppConfig.TLSKeyPath, <span class="literal">nil</span>))</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// handleMutate 处理来自 Kubernetes API 的 HTTP 请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMutate</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> {</span><br><span class="line">log.Info(<span class="string">"收到 mutate 请求"</span>)</span><br><span class="line"><span class="comment">// 读取请求体</span></span><br><span class="line">body, err := io.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">log.Errorf(<span class="string">"无法读取请求体: %v"</span>, err)</span><br><span class="line">http.Error(w, fmt.Sprintf(<span class="string">"无法读取请求体: %v"</span>, err), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 AdmissionReview 请求</span></span><br><span class="line"><span class="keyword">var</span> admissionReviewReq v1.AdmissionReview</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(bytes.NewReader(body)).Decode(&amp;admissionReviewReq); err != <span class="literal">nil</span> {</span><br><span class="line">log.Errorf(<span class="string">"无法解析请求: %v"</span>, err)</span><br><span class="line">http.Error(w, fmt.Sprintf(<span class="string">"无法解析请求: %v"</span>, err), http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备 AdmissionReview 响应</span></span><br><span class="line">admissionReviewResp := v1.AdmissionReview{</span><br><span class="line">TypeMeta: admissionReviewReq.TypeMeta,</span><br><span class="line">Response: &amp;v1.AdmissionResponse{</span><br><span class="line">UID: admissionReviewReq.Request.UID,</span><br><span class="line">},</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理请求并设置响应</span></span><br><span class="line"><span class="keyword">if</span> err := mutatePod(admissionReviewReq.Request, admissionReviewResp.Response); err != <span class="literal">nil</span> {</span><br><span class="line">log.Errorf(<span class="string">"无法修改 Pod: %v"</span>, err)</span><br><span class="line">sendDingTalkNotification(fmt.Sprintf(<span class="string">"无法修改 Pod: %v"</span>, err))</span><br><span class="line">http.Error(w, fmt.Sprintf(<span class="string">"无法修改 Pod: %v"</span>, err), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送响应</span></span><br><span class="line">respBytes, err := json.Marshal(admissionReviewResp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">log.Errorf(<span class="string">"无法编码响应: %v"</span>, err)</span><br><span class="line">http.Error(w, fmt.Sprintf(<span class="string">"无法编码响应: %v"</span>, err), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">w.Write(respBytes)</span><br><span class="line">log.Info(<span class="string">"mutate 请求处理完成"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理请求并设置响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mutatePod</span><span class="params">(req *v1.AdmissionRequest, resp *v1.AdmissionResponse)</span></span> <span class="type">error</span> {</span><br><span class="line"><span class="comment">// 从请求中反序列化 Pod 对象</span></span><br><span class="line"><span class="keyword">var</span> pod corev1.Pod</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(req.Object.Raw, &amp;pod); err != <span class="literal">nil</span> {</span><br><span class="line">errorMsg := fmt.Sprintf(<span class="string">"无法反序列化 Pod 对象: %v"</span>, err)</span><br><span class="line">log.Error(errorMsg)</span><br><span class="line">sendDingTalkNotification(errorMsg) <span class="comment">// 发送钉钉通知</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 Pod 是否有注解 "ab-build-different: 'true'"</span></span><br><span class="line"><span class="keyword">if</span> pod.Labels[AppConfig.PodAnnotationKey] != <span class="string">"true"</span> {</span><br><span class="line">log.Infof(<span class="string">"Pod %s 没有注解 ab-build-different=true"</span>, pod.Name)</span><br><span class="line">resp.Allowed = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 Pod 的 ownerReferences 中提取 StatefulSet 名称</span></span><br><span class="line"><span class="keyword">var</span> statefulSetName <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> _, ownerRef := <span class="keyword">range</span> pod.OwnerReferences {</span><br><span class="line"><span class="keyword">if</span> ownerRef.Kind == <span class="string">"StatefulSet"</span> {</span><br><span class="line">statefulSetName = ownerRef.Name</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> statefulSetName == <span class="string">""</span> {</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"在 Pod 的 ownerReferences 中找不到 StatefulSet 名称"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 Pod 的名称中提取索引</span></span><br><span class="line">indexStr := strings.TrimPrefix(pod.Name, statefulSetName+<span class="string">"-"</span>)</span><br><span class="line">index, err := strconv.Atoi(indexStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"无法从 Pod 名称中提取索引: %w"</span>, err)</span><br><span class="line">}</span><br><span class="line">log.Infof(<span class="string">"正在处理 Pod %s-%d 的 nodeSelector 修改请求"</span>, statefulSetName, index)</span><br><span class="line"><span class="comment">// 获取自定义 nodeSelector 键和值</span></span><br><span class="line">nodeSelectorKey, nodeSelectorValue, err := getNodeSelectorValue(&amp;pod, index)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 创建 patch</span></span><br><span class="line">patch := createNodeSelectorPatch(pod.Spec.NodeSelector, nodeSelectorKey, nodeSelectorValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化 patch 并将其设置在响应中</span></span><br><span class="line">patchBytes, err := json.Marshal(patch)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"无法序列化 patch: %w"</span>, err)</span><br><span class="line">}</span><br><span class="line">resp.Patch = patchBytes</span><br><span class="line">resp.PatchType = <span class="built_in">new</span>(v1.PatchType)</span><br><span class="line">*resp.PatchType = v1.PatchTypeJSONPatch</span><br><span class="line"></span><br><span class="line">resp.Allowed = <span class="literal">true</span></span><br><span class="line">log.Infof(<span class="string">"成功修改 Pod %s-%d 的 nodeSelector 为 %s:%s"</span>, statefulSetName, index, nodeSelectorKey, nodeSelectorValue)</span><br><span class="line">sendDingTalkNotification(fmt.Sprintf(<span class="string">"成功修改 Pod %s-%d 的 nodeSelector 为 %s:%s"</span>, statefulSetName, index, nodeSelectorKey, nodeSelectorValue))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNodeSelectorValue</span><span class="params">(pod *corev1.Pod, index <span class="type">int</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>, <span class="type">error</span>) {</span><br><span class="line">selectorJSON, ok := pod.Annotations[<span class="string">"custom-node-selector"</span>]</span><br><span class="line"><span class="keyword">if</span> !ok {</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, <span class="string">""</span>, fmt.Errorf(<span class="string">"注解 %s 不存在"</span>, <span class="string">"custom-node-selector"</span>)</span><br><span class="line">}</span><br><span class="line">log.Debugf(<span class="string">"selectorJSON: %s"</span>, selectorJSON) <span class="comment">// 打印查看实际的 JSON 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customSelector CustomNodeSelector</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(selectorJSON), &amp;customSelector)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, <span class="string">""</span>, fmt.Errorf(<span class="string">"解析自定义 nodeSelector 注解失败: %v"</span>, err)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index%<span class="number">2</span> == <span class="number">0</span> {</span><br><span class="line"><span class="keyword">return</span> customSelector.Key, customSelector.Even, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> customSelector.Key, customSelector.Odd, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNodeSelectorPatch</span><span class="params">(existingNodeSelector <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, nodeSelectorKey, nodeSelectorValue <span class="type">string</span>)</span></span> []<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{} {</span><br><span class="line"><span class="keyword">var</span> patch []<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}</span><br><span class="line"><span class="keyword">if</span> existingNodeSelector == <span class="literal">nil</span> {</span><br><span class="line"><span class="comment">// NodeSelector 为空，直接添加新的 NodeSelector</span></span><br><span class="line">patch = <span class="built_in">append</span>(patch, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}{</span><br><span class="line"><span class="string">"op"</span>:    <span class="string">"add"</span>,</span><br><span class="line"><span class="string">"path"</span>:  <span class="string">"/spec/nodeSelector"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>{nodeSelectorKey: nodeSelectorValue},</span><br><span class="line">})</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="comment">// NodeSelector 非空，直接替换整个 NodeSelector</span></span><br><span class="line">newSelector := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>{nodeSelectorKey: nodeSelectorValue}</span><br><span class="line">patch = <span class="built_in">append</span>(patch, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}{</span><br><span class="line"><span class="string">"op"</span>:    <span class="string">"replace"</span>,</span><br><span class="line"><span class="string">"path"</span>:  <span class="string">"/spec/nodeSelector"</span>,</span><br><span class="line"><span class="string">"value"</span>: newSelector,</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> patch</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// sendDingTalkNotification 发送通知到钉钉</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendDingTalkNotification</span><span class="params">(message <span class="type">string</span>)</span></span> <span class="type">error</span> {</span><br><span class="line">sign, timestamp := generateDingTalkSignature()</span><br><span class="line">log.Infof(<span class="string">"generateDingTalkSignature执行成功,%s   ,  %s"</span>, sign, timestamp)</span><br><span class="line">msg := DingTalkMessage{}</span><br><span class="line"><span class="comment">//var content string</span></span><br><span class="line"><span class="keyword">if</span> AppConfig.DingTalkMessageType == <span class="string">"markdown"</span> {</span><br><span class="line">msg.Msgtype = <span class="string">"markdown"</span></span><br><span class="line">msg.Markdown.Title = <span class="string">"Mutating Webhook Notification"</span></span><br><span class="line">msg.Markdown.Text = fmt.Sprintf(<span class="string">"###Mutating Webhook Notification \n &gt; %s"</span>, message)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">msg.Msgtype = <span class="string">"text"</span></span><br><span class="line">msg.Text.Content = message</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">msgBytes, err := json.Marshal(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tokenDingTalkUrl := fmt.Sprintf(<span class="string">"%s&amp;timestamp=%s&amp;sign=%s"</span>, AppConfig.DingTalkWebhookURL, timestamp, sign)</span><br><span class="line">resp, err := http.Post(tokenDingTalkUrl, <span class="string">"application/json"</span>, bytes.NewBuffer(msgBytes))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line">fmt.Printf(resp.Status, resp.Body)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="comment">// 读取响应体</span></span><br><span class="line">body, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != http.StatusOK {</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"发送钉钉消息失败, 状态吗: %s, 请求体: %s"</span>, resp.Status, <span class="type">string</span>(body))</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// generateDingTalkSignature 生成钉钉签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateDingTalkSignature</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">string</span>) {</span><br><span class="line">timestamp := strconv.FormatInt(time.Now().UnixNano()/<span class="type">int64</span>(time.Millisecond), <span class="number">10</span>)</span><br><span class="line">stringToSign := timestamp + <span class="string">"\n"</span> + AppConfig.DingTalkSecret</span><br><span class="line">hash := hmac.New(sha256.New, []<span class="type">byte</span>(AppConfig.DingTalkSecret))</span><br><span class="line">hash.Write([]<span class="type">byte</span>(stringToSign))</span><br><span class="line">signData := base64.StdEncoding.EncodeToString(hash.Sum(<span class="literal">nil</span>))</span><br><span class="line"><span class="keyword">return</span> signData, timestamp</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="构建-Mutating-控制器镜像"><a href="#构建-Mutating-控制器镜像" class="headerlink" title="构建 Mutating 控制器镜像"></a>构建 Mutating 控制器镜像</h3><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方的 Go 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.21</span> as builder</span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="comment"># 将 Go 模块文件复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> go.mod go.sum ./</span></span><br><span class="line"><span class="comment"># 下载 Go 模块依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod download</span></span><br><span class="line"><span class="comment"># 将源代码复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="comment"># 编译 Go 应用</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> CGO_ENABLED=0 GOOS=linux  GOARCH=amd64 go build -o webhook</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="comment"># 有请求 https 请求必须安装</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk --no-cache add ca-certificates</span></span><br><span class="line"><span class="comment"># 从构建阶段复制二进制文件和证书文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/webhook /webhook</span></span><br><span class="line"><span class="comment"># 运行 webhook</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">"/webhook"</span>]</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform linux/amd64 -t xxx:v1 --load .</span><br><span class="line">docker push xxx:v1</span><br></pre></td></tr></tbody></table></figure><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><p>Webhook API 服务器需要通过 TLS 方式通信。如果想将其部署至 Kubernetes 集群内，我们还需要证书<br>这是我们直接用生成证书的脚本，会保存在secret里面，然后再deployment里面去引用<br>需要注意的是 signerName，eks 的 signerName 是 beta.eks.amazonaws.com/app-serving</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">usage() {</span><br><span class="line">    cat &lt;&lt;EOF</span><br><span class="line">Generate certificate suitable for use with an sidecar-injector webhook service.</span><br><span class="line"></span><br><span class="line">This script uses k8s' CertificateSigningRequest API to a generate a</span><br><span class="line">certificate signed by k8s CA suitable for use with sidecar-injector webhook</span><br><span class="line">services. This requires permissions to create and approve CSR. See</span><br><span class="line">https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster for</span><br><span class="line">detailed explantion and additional instructions.</span><br><span class="line"></span><br><span class="line">The server key/cert k8s CA cert are stored in a k8s secret.</span><br><span class="line"></span><br><span class="line">usage: ${0} [OPTIONS]</span><br><span class="line"></span><br><span class="line">The following flags are required.</span><br><span class="line"></span><br><span class="line">       --service          Service name of webhook.</span><br><span class="line">       --namespace        Namespace where webhook service and secret reside.</span><br><span class="line">       --secret           Secret name for CA certificate and server certificate/key pair.</span><br><span class="line">EOF</span><br><span class="line">    exit 1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">while [[ $# -gt 0 ]]; do</span><br><span class="line">    case ${1} in</span><br><span class="line">        --service)</span><br><span class="line">            service="$2"</span><br><span class="line">            shift</span><br><span class="line">            ;;</span><br><span class="line">        --secret)</span><br><span class="line">            secret="$2"</span><br><span class="line">            shift</span><br><span class="line">            ;;</span><br><span class="line">        --namespace)</span><br><span class="line">            namespace="$2"</span><br><span class="line">            shift</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            usage</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">    shift</span><br><span class="line">done</span><br><span class="line">[ -z ${service} ] &amp;&amp; service=admission-webhook-example-svc</span><br><span class="line">[ -z ${secret} ] &amp;&amp; secret=admission-webhook-example-certs</span><br><span class="line">[ -z ${namespace} ] &amp;&amp; namespace=default</span><br><span class="line">if [ ! -x "$(command -v openssl)" ]; then</span><br><span class="line">    echo "openssl not found"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">csrName=${service}.${namespace}</span><br><span class="line">tmpdir=$(mktemp -d)</span><br><span class="line">echo "creating certs in tmpdir ${tmpdir} "</span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; ${tmpdir}/csr.conf</span><br><span class="line">[req]</span><br><span class="line">req_extensions = v3_req</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">[req_distinguished_name]</span><br><span class="line">[ v3_req ]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">extendedKeyUsage = serverAuth</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = ${service}</span><br><span class="line">DNS.2 = ${service}.${namespace}</span><br><span class="line">DNS.3 = ${service}.${namespace}.svc</span><br><span class="line">EOF</span><br><span class="line">openssl genrsa -out ${tmpdir}/server-key.pem 2048</span><br><span class="line">openssl req -new -key ${tmpdir}/server-key.pem -subj "/CN=${service}.${namespace}.svc" -out ${tmpdir}/server.csr -config ${tmpdir}/csr.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clean-up any previously created CSR <span class="keyword">for</span> our service. Ignore errors <span class="keyword">if</span> not present.</span></span><br><span class="line">kubectl delete csr ${csrName} 2&gt;/dev/null || true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create  server cert/key CSR and  send to k8s API</span></span><br><span class="line">cat &lt;&lt;EOF | kubectl create -f -</span><br><span class="line">apiVersion: certificates.k8s.io/v1</span><br><span class="line">kind: CertificateSigningRequest</span><br><span class="line">metadata:</span><br><span class="line">  name: ${csrName}</span><br><span class="line">spec:</span><br><span class="line">  groups:</span><br><span class="line">  - system:authenticated</span><br><span class="line">  request: $(cat ${tmpdir}/server.csr | base64 | tr -d '\n')</span><br><span class="line">  signerName: kubernetes.io/kube-apiserver-client</span><br><span class="line">  usages:</span><br><span class="line">  - digital signature</span><br><span class="line">  - key encipherment</span><br><span class="line">  - server auth</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">verify CSR has been created</span></span><br><span class="line">while true; do</span><br><span class="line">    kubectl get csr ${csrName}</span><br><span class="line">    if [ "$?" -eq 0 ]; then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">approve and fetch the signed certificate</span></span><br><span class="line">kubectl certificate approve ${csrName}</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">verify certificate has been signed</span></span><br><span class="line">for x in $(seq 10); do</span><br><span class="line">    serverCert=$(kubectl get csr ${csrName} -o jsonpath='{.status.certificate}')</span><br><span class="line">    if [[ ${serverCert} != '' ]]; then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">    sleep 1</span><br><span class="line">done</span><br><span class="line">if [[ ${serverCert} == '' ]]; then</span><br><span class="line">    echo "ERROR: After approving csr ${csrName}, the signed certificate did not appear on the resource. Giving up after 10 attempts." &gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">echo ${serverCert} | openssl base64 -d -A -out ${tmpdir}/server-cert.pem</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create the secret with CA cert and server cert/key</span></span><br><span class="line">kubectl create secret generic ${secret} \</span><br><span class="line">        --from-file=key.pem=${tmpdir}/server-key.pem \</span><br><span class="line">        --from-file=cert.pem=${tmpdir}/server-cert.pem \</span><br><span class="line">        --dry-run -o yaml |</span><br><span class="line">    kubectl -n ${namespace} apply -f -</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sts-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">custom-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sts-webhook</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sts-webhook</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sts-webhook</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">xxx:v1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-certs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/etc/webhook/certs"</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-certs</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">sts-webhook-certs</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">cert.pem</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">tls.crt</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">key.pem</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">tls.key</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sts-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">custom-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sts-webhook</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></tbody></table></figure><p>caBundle 获取<br><strong>TODO。。。</strong><br>接着创建 MutatingWebhookConfiguration<br>这里解读下，webhooks 是我们的主要配置<br>在 clientConfig 中，指定我们的 sts-webhook 的配置信息<br>rule 是我们的过滤规则，当 pods 创建的时候触发，并且需要 pods 有 labels 匹配 ab-build-different: "true"</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MutatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sts-mutating-webhook</span></span><br><span class="line"><span class="attr">webhooks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sts-webhook</span></span><br><span class="line">    <span class="attr">clientConfig:</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sts-webhook</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">custom-system</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">"/mutate"</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">caBundle:</span> <span class="string">"xxxxx"</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operations:</span> [<span class="string">"CREATE"</span>]</span><br><span class="line">        <span class="attr">apiGroups:</span> [<span class="string">""</span>]</span><br><span class="line">        <span class="attr">apiVersions:</span> [<span class="string">"v1"</span>]</span><br><span class="line">        <span class="attr">resources:</span> [<span class="string">"pods"</span>]</span><br><span class="line">    <span class="attr">admissionReviewVersions:</span> [<span class="string">"v1"</span>]</span><br><span class="line">    <span class="attr">sideEffects:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">failurePolicy:</span> <span class="string">Fail</span></span><br><span class="line">    <span class="attr">objectSelector:</span></span><br><span class="line">      <span class="attr">matchLabels:</span></span><br><span class="line">        <span class="attr">ab-build-different:</span> <span class="string">"true"</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mutating webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/09/hello-world/"/>
      <url>/2024/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
