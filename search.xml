<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发mutating webhook(修改statefulset的nodeselector)</title>
      <link href="/2024/04/09/kai-fa-mutating-webhook-xiu-gai-statefulset-de-nodeselector/"/>
      <url>/2024/04/09/kai-fa-mutating-webhook-xiu-gai-statefulset-de-nodeselector/</url>
      
        <content type="html"><![CDATA[<h2 id="何为-Admission-Webhook"><a href="#何为-Admission-Webhook" class="headerlink" title="何为 Admission Webhook"></a>何为 Admission Webhook</h2><p><strong>官网定义</strong><br>Admission webhook 是一种用于接收准入请求并对其进行处理的 HTTP 回调机制。可以定义两种类型的 admission webhook，即 validating admission webhook 和 mutating admission webhook。Mutating admission webhook 会先被调用。它们可以更改发送到 API 服务器的对象以执行自定义的设置默认值操作。</p><p><img src="/images/webhook-img.png"></p><p>接下来，本文将采用 Kubernetes 提供的 Mutating Admission Webhook 这一机制，来实现 statufulset 中修改或者新增 Pod NodeSelector 的，我们每次发送请求调用 API 创建 Pod 的时候，Pod 的 spec 信息会被先修改，再存储。如此一来，工作节点上的 Kublet 创建 Pod 的时候，将会预置NodeSelector。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>将 statufulset 中 索引是单数的 Pod 设置 NodeSelector 标签，标签的 key 为 “name”，value 为 “even”。双数的 Pod 设置 NodeSelector 标签，标签的 key 为 “name”，value 为 “odd”。 custom-node-selector: ‘{“key”: “name”, “even”: “node1”, “odd”: “node2”}’</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>不能影响到其他的服务，所以需要通过 Mutating Admission Webhook 机制，在创建 Pod 之前，通过 Pod 的 annotations 或者 labels 去判断是否经过 Mutating Admission Webhook，我们这里用 labels 去过滤是否启用 mutating 规则。 当 Pod 的 labels 中有 <strong>“ab-build-different: ‘true’”</strong> 的时候才去执行</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>部分代码解释<br>如果没有”ab-build-different: ‘true’”标签，直接放行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> pod<span class="token punctuation">.</span>Labels<span class="token punctuation">[</span>AppConfig<span class="token punctuation">.</span>PodAnnotationKey<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"true"</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Pod %s 没有注解 ab-build-different=true"</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>resp<span class="token punctuation">.</span>Allowed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析 json，我们这里的 annotations 是 <strong>custom-node-selector: ‘{“key”: “name”, “even”: “node1”, “odd”: “node2”}’</strong><br>所以这段代码最后输出会是 name node1 或者 name node2，即是我们想要用来新增或修改的 Pod 的 nodeSelector</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getNodeSelectorValue</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>corev1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>selectorJSON<span class="token punctuation">,</span> ok <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Annotations<span class="token punctuation">[</span><span class="token string">"custom-node-selector"</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"注解 %s 不存在"</span><span class="token punctuation">,</span> <span class="token string">"custom-node-selector"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">"selectorJSON: %s"</span><span class="token punctuation">,</span> selectorJSON<span class="token punctuation">)</span> <span class="token comment">// 打印查看实际的 JSON 字符串</span><span class="token keyword">var</span> customSelector CustomNodeSelectorerr <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>selectorJSON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>customSelector<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"解析自定义 nodeSelector 注解失败: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> index<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> customSelector<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> customSelector<span class="token punctuation">.</span>Even<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> customSelector<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> customSelector<span class="token punctuation">.</span>Odd<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完整代码</strong><br>包含 具体逻辑实现， 钉钉通知</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token string">"io"</span>    <span class="token string">"github.com/sirupsen/logrus"</span>v1 <span class="token string">"k8s.io/api/admission/v1"</span>corev1 <span class="token string">"k8s.io/api/core/v1"</span><span class="token string">"net/http"</span><span class="token string">"strconv"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token comment">// Config 结构体存储配置信息</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>WebhookServerPort      <span class="token builtin">string</span> <span class="token comment">// Webhook 服务器端口</span>TLSCertPath            <span class="token builtin">string</span> <span class="token comment">// TLS 证书路径</span>TLSKeyPath             <span class="token builtin">string</span> <span class="token comment">// TLS 密钥路径</span>DingTalkWebhookURL     <span class="token builtin">string</span> <span class="token comment">// 钉钉机器人 Webhook URL</span>DingTalkSecret         <span class="token builtin">string</span> <span class="token comment">// 钉钉机器人 Webhook Secret</span>DingTalkMessageType    <span class="token builtin">string</span> <span class="token comment">// 钉钉消息类型</span>PodAnnotationKey       <span class="token builtin">string</span> <span class="token comment">// Pod 注解键</span>DefaultStatefulSetName <span class="token builtin">string</span> <span class="token comment">// 默认的 StatefulSet 名称，如果无法从 Pod ownerReferences 中获取</span><span class="token punctuation">}</span><span class="token comment">// AppConfig 是全局配置实例</span><span class="token keyword">var</span> AppConfig <span class="token operator">=</span> Config<span class="token punctuation">{</span>WebhookServerPort<span class="token punctuation">:</span>      <span class="token string">":8443"</span><span class="token punctuation">,</span>TLSCertPath<span class="token punctuation">:</span>            <span class="token string">"/etc/webhook/certs/tls.crt"</span><span class="token punctuation">,</span>TLSKeyPath<span class="token punctuation">:</span>             <span class="token string">"/etc/webhook/certs/tls.key"</span><span class="token punctuation">,</span>DingTalkWebhookURL<span class="token punctuation">:</span>     <span class="token string">"https://oapi.dingtalk.com/robot/send?access_token=xxx"</span><span class="token punctuation">,</span>DingTalkSecret<span class="token punctuation">:</span>         <span class="token string">"xxx"</span><span class="token punctuation">,</span>DingTalkMessageType<span class="token punctuation">:</span>    <span class="token string">"markdown"</span><span class="token punctuation">,</span>           <span class="token comment">// 可以是 "text" 或 "markdown"</span>PodAnnotationKey<span class="token punctuation">:</span>       <span class="token string">"ab-build-different"</span><span class="token punctuation">,</span> <span class="token comment">// pod 打 annotations</span>DefaultStatefulSetName<span class="token punctuation">:</span> <span class="token string">"my-custom-sts"</span><span class="token punctuation">,</span>      <span class="token comment">// 默认的 StatefulSet 名称，如果无法从 Pod ownerReferences 中获取</span><span class="token punctuation">}</span><span class="token keyword">type</span> CustomNodeSelector <span class="token keyword">struct</span> <span class="token punctuation">{</span>Key  <span class="token builtin">string</span> <span class="token string">`json:"key"`</span>Even <span class="token builtin">string</span> <span class="token string">`json:"even"`</span>Odd  <span class="token builtin">string</span> <span class="token string">`json:"odd"`</span><span class="token punctuation">}</span><span class="token keyword">type</span> DingTalkMessage <span class="token keyword">struct</span> <span class="token punctuation">{</span>Msgtype  <span class="token builtin">string</span> <span class="token string">`json:"msgtype"`</span>Markdown <span class="token keyword">struct</span> <span class="token punctuation">{</span>Title <span class="token builtin">string</span> <span class="token string">`json:"title"`</span>Text  <span class="token builtin">string</span> <span class="token string">`json:"text"`</span><span class="token punctuation">}</span> <span class="token string">`json:"markdown,omitempty"`</span>Text <span class="token keyword">struct</span> <span class="token punctuation">{</span>Content <span class="token builtin">string</span> <span class="token string">`json:"content"`</span><span class="token punctuation">}</span> <span class="token string">`json:"text,omitempty"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 设置日志输出格式为 JSON</span>log<span class="token punctuation">.</span><span class="token function">SetFormatter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>logrus<span class="token punctuation">.</span>JSONFormatter<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/mutate"</span><span class="token punctuation">,</span> handleMutate<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"服务启动，监听端口"</span><span class="token punctuation">,</span> AppConfig<span class="token punctuation">.</span>WebhookServerPort<span class="token punctuation">)</span><span class="token comment">// http.ListenAndServeTLS 是一个阻塞调用，持续运行直到发生错误</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServeTLS</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span>WebhookServerPort<span class="token punctuation">,</span> AppConfig<span class="token punctuation">.</span>TLSCertPath<span class="token punctuation">,</span> AppConfig<span class="token punctuation">.</span>TLSKeyPath<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// handleMutate 处理来自 Kubernetes API 的 HTTP 请求</span><span class="token keyword">func</span> <span class="token function">handleMutate</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"收到 mutate 请求"</span><span class="token punctuation">)</span><span class="token comment">// 读取请求体</span>body<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"无法读取请求体: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"无法读取请求体: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 解析 AdmissionReview 请求</span><span class="token keyword">var</span> admissionReviewReq v1<span class="token punctuation">.</span>AdmissionReview<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>admissionReviewReq<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"无法解析请求: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"无法解析请求: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 准备 AdmissionReview 响应</span>admissionReviewResp <span class="token operator">:=</span> v1<span class="token punctuation">.</span>AdmissionReview<span class="token punctuation">{</span>TypeMeta<span class="token punctuation">:</span> admissionReviewReq<span class="token punctuation">.</span>TypeMeta<span class="token punctuation">,</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">.</span>AdmissionResponse<span class="token punctuation">{</span>UID<span class="token punctuation">:</span> admissionReviewReq<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>UID<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 处理请求并设置响应</span><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">mutatePod</span><span class="token punctuation">(</span>admissionReviewReq<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> admissionReviewResp<span class="token punctuation">.</span>Response<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"无法修改 Pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token function">sendDingTalkNotification</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"无法修改 Pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"无法修改 Pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 发送响应</span>respBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>admissionReviewResp<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"无法编码响应: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"无法编码响应: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>respBytes<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"mutate 请求处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 处理请求并设置响应</span><span class="token keyword">func</span> <span class="token function">mutatePod</span><span class="token punctuation">(</span>req <span class="token operator">*</span>v1<span class="token punctuation">.</span>AdmissionRequest<span class="token punctuation">,</span> resp <span class="token operator">*</span>v1<span class="token punctuation">.</span>AdmissionResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">// 从请求中反序列化 Pod 对象</span><span class="token keyword">var</span> pod corev1<span class="token punctuation">.</span>Pod<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Object<span class="token punctuation">.</span>Raw<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>errorMsg <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"无法反序列化 Pod 对象: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token function">sendDingTalkNotification</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span> <span class="token comment">// 发送钉钉通知</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">// 检查 Pod 是否有注解 "ab-build-different: 'true'"</span><span class="token keyword">if</span> pod<span class="token punctuation">.</span>Labels<span class="token punctuation">[</span>AppConfig<span class="token punctuation">.</span>PodAnnotationKey<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"true"</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Pod %s 没有注解 ab-build-different=true"</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>resp<span class="token punctuation">.</span>Allowed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// 从 Pod 的 ownerReferences 中提取 StatefulSet 名称</span><span class="token keyword">var</span> statefulSetName <span class="token builtin">string</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ownerRef <span class="token operator">:=</span> <span class="token keyword">range</span> pod<span class="token punctuation">.</span>OwnerReferences <span class="token punctuation">{</span><span class="token keyword">if</span> ownerRef<span class="token punctuation">.</span>Kind <span class="token operator">==</span> <span class="token string">"StatefulSet"</span> <span class="token punctuation">{</span>statefulSetName <span class="token operator">=</span> ownerRef<span class="token punctuation">.</span>Name<span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> statefulSetName <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"在 Pod 的 ownerReferences 中找不到 StatefulSet 名称"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 从 Pod 的名称中提取索引</span>indexStr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> statefulSetName<span class="token operator">+</span><span class="token string">"-"</span><span class="token punctuation">)</span>index<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>indexStr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"无法从 Pod 名称中提取索引: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"正在处理 Pod %s-%d 的 nodeSelector 修改请求"</span><span class="token punctuation">,</span> statefulSetName<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token comment">// 获取自定义 nodeSelector 键和值</span>nodeSelectorKey<span class="token punctuation">,</span> nodeSelectorValue<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getNodeSelectorValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pod<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">// 创建 patch</span>patch <span class="token operator">:=</span> <span class="token function">createNodeSelectorPatch</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>NodeSelector<span class="token punctuation">,</span> nodeSelectorKey<span class="token punctuation">,</span> nodeSelectorValue<span class="token punctuation">)</span><span class="token comment">// 序列化 patch 并将其设置在响应中</span>patchBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>patch<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"无法序列化 patch: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>resp<span class="token punctuation">.</span>Patch <span class="token operator">=</span> patchBytesresp<span class="token punctuation">.</span>PatchType <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>PatchType<span class="token punctuation">)</span><span class="token operator">*</span>resp<span class="token punctuation">.</span>PatchType <span class="token operator">=</span> v1<span class="token punctuation">.</span>PatchTypeJSONPatchresp<span class="token punctuation">.</span>Allowed <span class="token operator">=</span> <span class="token boolean">true</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"成功修改 Pod %s-%d 的 nodeSelector 为 %s:%s"</span><span class="token punctuation">,</span> statefulSetName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> nodeSelectorKey<span class="token punctuation">,</span> nodeSelectorValue<span class="token punctuation">)</span><span class="token function">sendDingTalkNotification</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"成功修改 Pod %s-%d 的 nodeSelector 为 %s:%s"</span><span class="token punctuation">,</span> statefulSetName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> nodeSelectorKey<span class="token punctuation">,</span> nodeSelectorValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">getNodeSelectorValue</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>corev1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>selectorJSON<span class="token punctuation">,</span> ok <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Annotations<span class="token punctuation">[</span><span class="token string">"custom-node-selector"</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"注解 %s 不存在"</span><span class="token punctuation">,</span> <span class="token string">"custom-node-selector"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">"selectorJSON: %s"</span><span class="token punctuation">,</span> selectorJSON<span class="token punctuation">)</span> <span class="token comment">// 打印查看实际的 JSON 字符串</span><span class="token keyword">var</span> customSelector CustomNodeSelectorerr <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>selectorJSON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>customSelector<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"解析自定义 nodeSelector 注解失败: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> index<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> customSelector<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> customSelector<span class="token punctuation">.</span>Even<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> customSelector<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> customSelector<span class="token punctuation">.</span>Odd<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">createNodeSelectorPatch</span><span class="token punctuation">(</span>existingNodeSelector <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> nodeSelectorKey<span class="token punctuation">,</span> nodeSelectorValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">var</span> patch <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> existingNodeSelector <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">// NodeSelector 为空，直接添加新的 NodeSelector</span>patch <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>patch<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"op"</span><span class="token punctuation">:</span>    <span class="token string">"add"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token punctuation">:</span>  <span class="token string">"/spec/nodeSelector"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>nodeSelectorKey<span class="token punctuation">:</span> nodeSelectorValue<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// NodeSelector 非空，直接替换整个 NodeSelector</span>newSelector <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>nodeSelectorKey<span class="token punctuation">:</span> nodeSelectorValue<span class="token punctuation">}</span>patch <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>patch<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"op"</span><span class="token punctuation">:</span>    <span class="token string">"replace"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token punctuation">:</span>  <span class="token string">"/spec/nodeSelector"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span> newSelector<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> patch<span class="token punctuation">}</span><span class="token comment">// sendDingTalkNotification 发送通知到钉钉</span><span class="token keyword">func</span> <span class="token function">sendDingTalkNotification</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>sign<span class="token punctuation">,</span> timestamp <span class="token operator">:=</span> <span class="token function">generateDingTalkSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"generateDingTalkSignature执行成功,%s   ,  %s"</span><span class="token punctuation">,</span> sign<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span>msg <span class="token operator">:=</span> DingTalkMessage<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//var content string</span><span class="token keyword">if</span> AppConfig<span class="token punctuation">.</span>DingTalkMessageType <span class="token operator">==</span> <span class="token string">"markdown"</span> <span class="token punctuation">{</span>msg<span class="token punctuation">.</span>Msgtype <span class="token operator">=</span> <span class="token string">"markdown"</span>msg<span class="token punctuation">.</span>Markdown<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"Mutating Webhook Notification"</span>msg<span class="token punctuation">.</span>Markdown<span class="token punctuation">.</span>Text <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"###Mutating Webhook Notification \n &gt; %s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>msg<span class="token punctuation">.</span>Msgtype <span class="token operator">=</span> <span class="token string">"text"</span>msg<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Content <span class="token operator">=</span> message<span class="token punctuation">}</span>msgBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>tokenDingTalkUrl <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s&amp;timestamp=%s&amp;sign=%s"</span><span class="token punctuation">,</span> AppConfig<span class="token punctuation">.</span>DingTalkWebhookURL<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> sign<span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span>tokenDingTalkUrl<span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>msgBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Status<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 读取响应体</span>body<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"发送钉钉消息失败, 状态吗: %s, 请求体: %s"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Status<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// generateDingTalkSignature 生成钉钉签名</span><span class="token keyword">func</span> <span class="token function">generateDingTalkSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>timestamp <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">int64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>stringToSign <span class="token operator">:=</span> timestamp <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> AppConfig<span class="token punctuation">.</span>DingTalkSecrethash <span class="token operator">:=</span> hmac<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>sha256<span class="token punctuation">.</span>New<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span>DingTalkSecret<span class="token punctuation">)</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>stringToSign<span class="token punctuation">)</span><span class="token punctuation">)</span>signData <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> signData<span class="token punctuation">,</span> timestamp<span class="token punctuation">}</span>\<span class="token string">``</span><span class="token string">`### 构建 Mutating 控制器镜像`</span><span class="token string">``</span>Dockerfile# 使用官方的 Go 基础镜像FROM golang<span class="token punctuation">:</span><span class="token number">1.21</span> as builder# 设置工作目录WORKDIR <span class="token operator">/</span>app# 将 Go 模块文件复制到容器中COPY <span class="token keyword">go</span><span class="token punctuation">.</span>mod <span class="token keyword">go</span><span class="token punctuation">.</span>sum <span class="token punctuation">.</span><span class="token operator">/</span># 下载 Go 模块依赖RUN <span class="token keyword">go</span> mod download# 将源代码复制到容器中COPY <span class="token punctuation">.</span> <span class="token punctuation">.</span># 编译 Go 应用RUN CGO_ENABLED<span class="token operator">=</span><span class="token number">0</span> GOOS<span class="token operator">=</span>linux  GOARCH<span class="token operator">=</span>amd64 <span class="token keyword">go</span> build <span class="token operator">-</span>o webhookFROM alpine<span class="token punctuation">:</span>latest# 有请求 https 请求必须安装RUN apk <span class="token operator">--</span>no<span class="token operator">-</span>cache add ca<span class="token operator">-</span>certificates# 从构建阶段复制二进制文件和证书文件COPY <span class="token operator">--</span>from<span class="token operator">=</span>builder <span class="token operator">/</span>app<span class="token operator">/</span>webhook <span class="token operator">/</span>webhook# 运行 webhookENTRYPOINT <span class="token punctuation">[</span><span class="token string">"/webhook"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> buildx build <span class="token parameter variable">--platform</span> linux/amd64 <span class="token parameter variable">-t</span> xxx:v1 <span class="token parameter variable">--load</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> push xxx:v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><p>Webhook API 服务器需要通过 TLS 方式通信。如果想将其部署至 Kubernetes 集群内，我们还需要证书<br>这是我们直接用生成证书的脚本，会保存在secret里面，然后再deployment里面去引用<br>需要注意的是 signerName，eks 的 signerName 是 beta.eks.amazonaws.com/app-serving</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span><span class="token function-name function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOFGenerate certificate suitable for use with an sidecar-injector webhook service.This script uses k8s' CertificateSigningRequest API to a generate acertificate signed by k8s CA suitable for use with sidecar-injector webhookservices. This requires permissions to create and approve CSR. Seehttps://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster fordetailed explantion and additional instructions.The server key/cert k8s CA cert are stored in a k8s secret.usage: <span class="token variable">${0}</span> [OPTIONS]The following flags are required.       --service          Service name of webhook.       --namespace        Namespace where webhook service and secret reside.       --secret           Secret name for CA certificate and server certificate/key pair.EOF</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">case</span> <span class="token variable">${1}</span> <span class="token keyword">in</span>        --service<span class="token punctuation">)</span>            <span class="token assign-left variable">service</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>            <span class="token builtin class-name">shift</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        --secret<span class="token punctuation">)</span>            <span class="token assign-left variable">secret</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>            <span class="token builtin class-name">shift</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        --namespace<span class="token punctuation">)</span>            <span class="token assign-left variable">namespace</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>            <span class="token builtin class-name">shift</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span>            usage            <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span>    <span class="token builtin class-name">shift</span><span class="token keyword">done</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">${service}</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">service</span><span class="token operator">=</span>admission-webhook-example-svc<span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">${secret}</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">secret</span><span class="token operator">=</span>admission-webhook-example-certs<span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">${namespace}</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">namespace</span><span class="token operator">=</span>default<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-x</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> openssl<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"openssl not found"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token assign-left variable">csrName</span><span class="token operator">=</span><span class="token variable">${service}</span><span class="token builtin class-name">.</span><span class="token variable">${namespace}</span><span class="token assign-left variable">tmpdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>mktemp <span class="token parameter variable">-d</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"creating certs in tmpdir <span class="token variable">${tmpdir}</span> "</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;&gt;</span> <span class="token variable">${tmpdir}</span>/csr.conf</span>[req]req_extensions = v3_reqdistinguished_name = req_distinguished_name[req_distinguished_name][ v3_req ]basicConstraints = CA:FALSEkeyUsage = nonRepudiation, digitalSignature, keyEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names[alt_names]DNS.1 = <span class="token variable">${service}</span>DNS.2 = <span class="token variable">${service}</span>.<span class="token variable">${namespace}</span>DNS.3 = <span class="token variable">${service}</span>.<span class="token variable">${namespace}</span>.svcEOF</span>openssl genrsa <span class="token parameter variable">-out</span> <span class="token variable">${tmpdir}</span>/server-key.pem <span class="token number">2048</span>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> <span class="token variable">${tmpdir}</span>/server-key.pem <span class="token parameter variable">-subj</span> <span class="token string">"/CN=<span class="token variable">${service}</span>.<span class="token variable">${namespace}</span>.svc"</span> <span class="token parameter variable">-out</span> <span class="token variable">${tmpdir}</span>/server.csr <span class="token parameter variable">-config</span> <span class="token variable">${tmpdir}</span>/csr.conf<span class="token comment"># clean-up any previously created CSR for our service. Ignore errors if not present.</span>kubectl delete csr <span class="token variable">${csrName}</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">||</span> <span class="token boolean">true</span><span class="token comment"># create  server cert/key CSR and  send to k8s API</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> kubectl create <span class="token parameter variable">-f</span> -</span>apiVersion: certificates.k8s.io/v1kind: CertificateSigningRequestmetadata:  name: <span class="token variable">${csrName}</span>spec:  groups:  - system:authenticated  request: <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $<span class="token punctuation">{</span>tmpdir<span class="token punctuation">}</span>/server.csr <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\n'</span><span class="token variable">)</span></span>  signerName: kubernetes.io/kube-apiserver-client  usages:  - digital signature  - key encipherment  - server authEOF</span><span class="token comment"># verify CSR has been created</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    kubectl get csr <span class="token variable">${csrName}</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$?</span>"</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">break</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment"># approve and fetch the signed certificate</span>kubectl certificate approve <span class="token variable">${csrName}</span><span class="token comment"># verify certificate has been signed</span><span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">10</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">serverCert</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl get csr $<span class="token punctuation">{</span>csrName<span class="token punctuation">}</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">'{.status.certificate}'</span><span class="token variable">)</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${serverCert}</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">break</span>    <span class="token keyword">fi</span>    <span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${serverCert}</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"ERROR: After approving csr <span class="token variable">${csrName}</span>, the signed certificate did not appear on the resource. Giving up after 10 attempts."</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token variable">${serverCert}</span> <span class="token operator">|</span> openssl base64 <span class="token parameter variable">-d</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-out</span> <span class="token variable">${tmpdir}</span>/server-cert.pem<span class="token comment"># create the secret with CA cert and server cert/key</span>kubectl create secret generic <span class="token variable">${secret}</span> <span class="token punctuation">\</span>        --from-file<span class="token operator">=</span>key.pem<span class="token operator">=</span><span class="token variable">${tmpdir}</span>/server-key.pem <span class="token punctuation">\</span>        --from-file<span class="token operator">=</span>cert.pem<span class="token operator">=</span><span class="token variable">${tmpdir}</span>/server-cert.pem <span class="token punctuation">\</span>        --dry-run <span class="token parameter variable">-o</span> yaml <span class="token operator">|</span>    kubectl <span class="token parameter variable">-n</span> <span class="token variable">${namespace}</span> apply <span class="token parameter variable">-f</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> custom<span class="token punctuation">-</span>system<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook          <span class="token key atrule">image</span><span class="token punctuation">:</span> xxx<span class="token punctuation">:</span>v1          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8443</span>              <span class="token key atrule">name</span><span class="token punctuation">:</span> http              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> webhook<span class="token punctuation">-</span>certs              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/webhook/certs"</span>              <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> webhook<span class="token punctuation">-</span>certs          <span class="token key atrule">secret</span><span class="token punctuation">:</span>            <span class="token key atrule">secretName</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook<span class="token punctuation">-</span>certs            <span class="token key atrule">items</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> cert.pem                <span class="token key atrule">path</span><span class="token punctuation">:</span> tls.crt              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> key.pem                <span class="token key atrule">path</span><span class="token punctuation">:</span> tls.key<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> custom<span class="token punctuation">-</span>system<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8443</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> http  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>caBundle 获取<br><strong>TODO。。。</strong><br>接着创建 MutatingWebhookConfiguration<br>这里解读下，webhooks 是我们的主要配置<br>在 clientConfig 中，指定我们的 sts-webhook 的配置信息<br>rule 是我们的过滤规则，当 pods 创建的时候触发，并且需要 pods 有 labels 匹配 ab-build-different: “true”</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> admissionregistration.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> MutatingWebhookConfiguration<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>mutating<span class="token punctuation">-</span>webhook<span class="token key atrule">webhooks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook    <span class="token key atrule">clientConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">service</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> sts<span class="token punctuation">-</span>webhook        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> custom<span class="token punctuation">-</span>system        <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/mutate"</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8443</span>      <span class="token key atrule">caBundle</span><span class="token punctuation">:</span> <span class="token string">"xxxxx"</span>    <span class="token key atrule">rules</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">operations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CREATE"</span><span class="token punctuation">]</span>        <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>        <span class="token key atrule">apiVersions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"v1"</span><span class="token punctuation">]</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pods"</span><span class="token punctuation">]</span>    <span class="token key atrule">admissionReviewVersions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"v1"</span><span class="token punctuation">]</span>    <span class="token key atrule">sideEffects</span><span class="token punctuation">:</span> None    <span class="token key atrule">failurePolicy</span><span class="token punctuation">:</span> Fail    <span class="token key atrule">objectSelector</span><span class="token punctuation">:</span>      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>        <span class="token key atrule">ab-build-different</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mutating webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/09/hello-world/"/>
      <url>/2024/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
